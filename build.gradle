plugins {
    id 'java'
    id 'io.quarkus'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    // Core
    implementation 'io.quarkus:quarkus-arc'
    implementation 'org.apache.camel.quarkus:camel-quarkus-core'
    implementation 'org.apache.camel.quarkus:camel-quarkus-rest'

    // HTTP
    implementation 'org.apache.camel.quarkus:camel-quarkus-http'

    // Serialization
    implementation 'org.apache.camel.quarkus:camel-quarkus-jackson'
    implementation 'org.apache.camel.quarkus:camel-quarkus-jaxb'

    // Metrics
    implementation 'org.apache.camel.quarkus:camel-quarkus-microprofile-health'
    implementation 'org.apache.camel.quarkus:camel-quarkus-microprofile-metrics'

    // Docs
    implementation 'org.apache.camel.quarkus:camel-quarkus-openapi-java'

    // Code Gen
    compileOnly 'org.projectlombok:lombok:1.18.20'

    // Tests
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

}

group 'com.mebr0'
version '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
